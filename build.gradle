apply plugin: 'java'
apply plugin: 'rpm'

group = 'org.bahmni.openmrs'
jar.baseName = 'openmrs'
sourceCompatibility = 1.7
def tomcatVersion = "8.0.12";
def openmrsVersion = "1.11.3";
version = openmrsVersion

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:1.9.1+'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'http://mavenrepo.openmrs.org/nexus/content/repositories/public'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

task extractWar(dependsOn: 'downloadMRSWar', type: Copy) {
    from zipTree(file("${buildDir}/resources/main/openmrs.war"))
    into file("${buildDir}/openmrs")
}

def properties = new Properties()
properties.setProperty("SERVER_PORT", "8080")
properties.setProperty("BASE_DIR", "${buildDir}")
properties.setProperty("CONTEXT_PATH", "openmrs")
properties.setProperty("WAR_DIRECTORY", "${buildDir}/openmrs")
properties.setProperty("OPENMRS_RUNTIME_PROPERTIES_FILE", "${projectDir}/local/openmrs-runtime.properties")

task launch(dependsOn: ['build', 'extractWar'], type: JavaExec) {
    main "org.bahmni.openmrs.launch.Main"
    classpath sourceSets.main.runtimeClasspath
    environment properties
}

configurations {
    mrsWar
}

jar {
    manifest {
        attributes 'Main-Class': "org.bahmni.openmrs.launch.Main"
    }
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task execute(dependsOn: 'build', type: JavaExec) {
    main = "org.bahmni.openmrs.launch.Main"
    classpath = sourceSets.main.runtimeClasspath
    standardOutput = System.out
}

task normalizeJarName(type: Copy) {
    from "${buildDir}" + "/libs/"
    into "${buildDir}" + "/libs/"
    include(jar.baseName + '-' + openmrsVersion + '.jar')
    rename(jar.baseName + '-' + openmrsVersion + '.jar', 'openmrs.jar')
}

task dist(dependsOn: ['build', 'downloadMRSWar', 'normalizeJarName'], type: Rpm) {
    packageName 'openmrs'
    version "1"
    release "11.3"
    arch NOARCH
    os LINUX

    into '/opt/openmrs'

    requires('unzip')

    postInstall file("${projectDir}/scripts/postinstall.sh")
    preUninstall file("${projectDir}/scripts/preuninstall.sh")
    postUninstall file("${projectDir}/scripts/postuninstall.sh")

    from("${buildDir}/libs/openmrs.jar") {
        fileMode = 0755
        createDirectoryEntry = true
        into 'lib/'
    }

    from("${projectDir}/resources/") {
        fileMode = 0755
        createDirectoryEntry = true
        into 'etc'
    }

    from("${projectDir}/scripts/rpm/") {
        fileMode = 0755
        createDirectoryEntry  = true
        into 'bin'
    }

    from("${projectDir}/resources/placeholder") {
        fileMode = 0755
        createDirectoryEntry  = true
        into 'run'
    }

    from("${projectDir}/resources/placeholder") {
        fileMode = 0755
        createDirectoryEntry  = true
        into 'log'
    }

    from("${buildDir}/resources/main/openmrs.war") {
        fileMode = 0755
        createDirectoryEntry  = true
        into '.'
    }

    from("${projectDir}/resources/placeholder") {
        fileMode = 0755
        createDirectoryEntry  = true
        into 'modules'
    }

    from("${projectDir}/resources/placeholder") {
        fileMode = 0755
        createDirectoryEntry  = true
        into 'openmrs'
    }


}

configurations {
    all*.exclude(group: 'com.sun.jdmk', module: 'jmxtools')
    all*.exclude(group: 'com.sun.jmx', module: 'jmxri')
    all*.exclude(group: 'javax.jms', module: 'jms')
    all*.exclude(group: 'javax.mail', module: 'mail')
}

task downloadMRSWar << {
    new File("${buildDir}/resources/main").mkdirs();
    configurations.mrsWar.resolve().each { file ->
        if (file.getName().contains("openmrs")) {
            file.renameTo(new File("${buildDir}/resources/main/openmrs.war"))
        }
    }
}

dependencies {
    compile "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}",
            "org.apache.tomcat:tomcat-jasper:${tomcatVersion}",
            "org.apache.tomcat:tomcat-jasper-el:${tomcatVersion}",
            "org.apache.tomcat:tomcat-jsp-api:${tomcatVersion}"
    mrsWar "org.openmrs.web:openmrs-webapp:${openmrsVersion}@war"
}